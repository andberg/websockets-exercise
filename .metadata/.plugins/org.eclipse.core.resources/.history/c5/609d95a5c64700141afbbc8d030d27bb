package se.berglund.websockets;

import javax.websocket.CloseReason;
import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.ServerEndpoint;

import se.berglund.models.Message;
import se.berglund.models.Whiteboard;

@ServerEndpoint(value = "/whiteboards", encoders = { JsonEncoder.class }, decoders = { JsonDecoder.class })
public class WhiteboardSocket {

	@OnOpen
	public void myOnOpen(Session session) {
		System.out.println("WhiteboardSocket connected, session id: "
				+ session.getId().toString());
	}

	@OnMessage
	public void myOnMessage(Session session, Message message) {

		System.out.println("Whiteboard Message recived " + message.toString());

		if ((message.getType()).equals("get-all-whiteboards")) {
			Whiteboard whiteboard = new Whiteboard();
			whiteboard.setName(message.getData().getJsonObject(0)
					.getString("name"));
			System.out.println(whiteboard.toString());
		}

		for (Session s : session.getOpenSessions()) {
			if (s.isOpen()) {
				s.getAsyncRemote().sendObject(message);
			}
		}
	}

	@OnClose
	public void myOnClose(Session session, CloseReason reason) {
		System.out.println("WhiteboardSocket closed");
	}

	@OnError
	public void myOnError(Session session, Throwable throwable) {
		System.out.println("Angular WhiteboardSocket Error"
				+ throwable.getMessage());
	}

	private Message messageHandler(Message response) {
		
		if ((response.getType()).contentEquals("get-all-whiteboards")) {
			Whiteboard whiteboard = new Whiteboard();
			whiteboard.setName(response.getData().getJsonObject(0)
					.getString("name"));
			System.out.println(whiteboard.toString());
		}
		return response;
	}
}
