package se.berglund.datastorage;

import java.util.ArrayList;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import se.berglund.models.Whiteboard;

/* WhiteboardManager-class takes a Whiteboard from the MessageHandler
 * and contact the MySQL database via Hibernate 
 * and can execute CUD-functionality. 
 * */

public class WhiteboardManager {

	private static WhiteboardManager firstInstance = null;

	private WhiteboardManager() {
	}

	public static WhiteboardManager getInstance() {
		synchronized (WhiteboardManager.class) {

			if (firstInstance == null) {
				firstInstance = new WhiteboardManager();
			}
			return firstInstance;
		}
	}

	public ArrayList<Whiteboard> getAllWhiteboards() {

		SessionFactory sessFactory = HibernateSessionFactory
				.getSessionFactory();
		Session session = sessFactory.openSession();
		Transaction tr = session.beginTransaction();

		try {
			String selectSQL = "from Whiteboard w";
			Query query = session.createQuery(selectSQL);
			@SuppressWarnings("unchecked")
			ArrayList<Whiteboard> whiteboards = (ArrayList<Whiteboard>) query
					.list();
			tr.commit();
			return (ArrayList<Whiteboard>) whiteboards;
		} catch (Exception e) {
			tr.rollback();
			e.printStackTrace();
			return null;
		} finally {
			session.close();
		}
	}

	public void createWhiteboard(Whiteboard whiteboard) {
		SessionFactory sessFactory = HibernateSessionFactory
				.getSessionFactory();
		Session session = sessFactory.openSession();
		Transaction tr = session.beginTransaction();
		try {
			session.save(whiteboard);
			tr.commit();
		} catch (Exception e) {
			e.printStackTrace();
			tr.rollback();
		} finally {
			session.close();
		}
	}

	public void deleteWhiteboard(Whiteboard whiteboard) {
		SessionFactory sessFactory = HibernateSessionFactory
				.getSessionFactory();
		Session session = sessFactory.openSession();
		Transaction tr = session.beginTransaction();

		try {
			session.delete(whiteboard);
			tr.commit();
		} catch (Exception e) {
			e.printStackTrace();
			tr.rollback();
		} finally {
			session.close();
		}
	}

}
