package se.berglund.websockets;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.websocket.CloseReason;
import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.ServerEndpoint;

import se.berglund.messagehandler.MessageHandler;
import se.berglund.models.Client;
import se.berglund.models.Message;

/* Websocket connection to Angular Floggit Whiteboard application
 * Localhost/9000/# */

@ServerEndpoint(value = "/whiteboards", encoders = { JsonEncoder.class }, decoders = { JsonDecoder.class })
public class WhiteboardSocket {
	
	List<Client> clients = Collections
			.synchronizedList(new ArrayList<Client>());

	@OnOpen
	public void myOnOpen(Session session) {
		System.out.println("WhiteboardSocket connected, session id: "
				+ session.getId().toString());
		Client client = new Client(session);
		clients.add(client);
	}

	@OnMessage
	public void myOnMessage(Session session, Message message) {
		int whiteboardId = 0;
		if (message.getType().contains("get-current-whiteboard")) {
			for (Client client : clients) {
				if (client.getSession().equals(session)) {
					whiteboardId = Integer.parseInt(message.getData()
							.getJsonObject(0).getString("id"));
					client.setWhiteboardId(whiteboardId);
					System.out.println("Added whiteboard id to session. ");
				}
			}
		}

		MessageHandler messageHandler = new MessageHandler(message);
		Message handeldMessage = messageHandler.handleMessage();

		if (handeldMessage.getType().contains("get-current-whiteboard")) {
			for (Client client : clients) {
				if (client.getWhiteboardId() == whiteboardId) {
					client.getSession().getAsyncRemote()
							.sendObject(handeldMessage);
				}
			}
		} else {
			for (Session s : session.getOpenSessions()) {
				if (s.isOpen()) {
					s.getAsyncRemote().sendObject(handeldMessage);
				}
			}
		}
	}

	@OnClose
	public void myOnClose(Session session, CloseReason reason) {
		System.out.println("WhiteboardSocket closed");
	}

	@OnError
	public void myOnError(Session session, Throwable throwable) {
		throwable.printStackTrace();
	}
}
